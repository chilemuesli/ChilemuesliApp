require_relative '../node_modules/react-native/scripts/react_native_pods'
require_relative '../node_modules/@react-native-community/cli-platform-ios/native_modules'

platform :ios, '11.0'


target 'ChilemuesliApp' do
  # Pods for ChilemuesliApp
  # pod 'FBLazyVector', :path => "../node_modules/react-native/Libraries/FBLazyVector"
  # pod 'FBReactNativeSpec', :path => "../node_modules/react-native/React/FBReactNativeSpec"
  # pod 'RCTRequired', :path => "../node_modules/react-native/Libraries/RCTRequired"
  # pod 'RCTTypeSafety', :path => "../node_modules/react-native/Libraries/TypeSafety"
  # pod 'React', :path => '../node_modules/react-native/'
  # pod 'React-Core', :path => '../node_modules/react-native/'
  # pod 'React-CoreModules', :path => '../node_modules/react-native/React/CoreModules'
  # pod 'React-Core/DevSupport', :path => '../node_modules/react-native/'
  # pod 'React-RCTActionSheet', :path => '../node_modules/react-native/Libraries/ActionSheetIOS'
  # pod 'React-RCTAnimation', :path => '../node_modules/react-native/Libraries/NativeAnimation'
  # pod 'React-RCTBlob', :path => '../node_modules/react-native/Libraries/Blob'
  # pod 'React-RCTImage', :path => '../node_modules/react-native/Libraries/Image'
  # pod 'React-RCTLinking', :path => '../node_modules/react-native/Libraries/LinkingIOS'
  # pod 'React-RCTNetwork', :path => '../node_modules/react-native/Libraries/Network'
  # pod 'React-RCTSettings', :path => '../node_modules/react-native/Libraries/Settings'
  # pod 'React-RCTText', :path => '../node_modules/react-native/Libraries/Text'
  # pod 'React-RCTVibration', :path => '../node_modules/react-native/Libraries/Vibration'
  # pod 'React-Core/RCTWebSocket', :path => '../node_modules/react-native/'

  # pod 'React-cxxreact', :path => '../node_modules/react-native/ReactCommon/cxxreact'
  # pod 'React-jsi', :path => '../node_modules/react-native/ReactCommon/jsi'
  # pod 'React-jsiexecutor', :path => '../node_modules/react-native/ReactCommon/jsiexecutor'
  # pod 'React-jsinspector', :path => '../node_modules/react-native/ReactCommon/jsinspector'
  # pod 'ReactCommon/callinvoker', :path => "../node_modules/react-native/ReactCommon"
  # pod 'ReactCommon/turbomodule/core', :path => "../node_modules/react-native/ReactCommon"
  # pod 'Yoga', :path => '../node_modules/react-native/ReactCommon/yoga', :modular_headers => true

  # pod 'DoubleConversion', :podspec => '../node_modules/react-native/third-party-podspecs/DoubleConversion.podspec'
  # pod 'glog', :podspec => '../node_modules/react-native/third-party-podspecs/glog.podspec'
  # pod 'Folly', :podspec => '../node_modules/react-native/third-party-podspecs/Folly.podspec'
  

  # pod 'RNBluetoothStateManager', :path => '../node_modules/react-native-bluetooth-state-manager'
  # pod 'RNFS', :path => '../node_modules/react-native-fs'
  # pod 'react-native-video', :path => '../node_modules/react-native-video/react-native-video.podspec'
  
  # pod 'RNVectorIcons', :path => '../node_modules/react-native-vector-icons'
  
  
  config = use_native_modules!
  use_react_native!(:path => config["reactNativePath"])
  target 'ChilemuesliAppTests' do
    inherit! :complete
    # Pods for testing
  end

  use_native_modules!
end

target 'ChilemuesliApp-tvOS' do
  # Pods for ChilemuesliApp-tvOS

  target 'ChilemuesliApp-tvOSTests' do
    inherit! :complete
    # Pods for testing
  end

end

post_install do |installer|
  react_native_post_install(installer)
  __apply_Xcode_12_5_M1_post_install_workaround(installer)
  
  installer.pods_project.targets.each do |target|
    target.build_configurations.each do |config|
      config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)', '_LIBCPP_ENABLE_CXX17_REMOVED_UNARY_BINARY_FUNCTION']
    end
  end
end

# post_install do |installer|
#   ## Fix for XCode 12.5
#   find_and_replace("../node_modules/react native/React/CxxBridge/RCTCxxBridge.mm", "_initializeModules:(NSArray<id<RCTBridgeModule>> *)modules", "_initializeModules:(NSArray<Class> *)modules")
#   find_and_replace("../node_modules/react-native/ReactCommon/turbomodule/core/platform/ios/RCTTurboModuleManager.mm", "RCTBridgeModuleNameForClass(strongModule))", "RCTBridgeModuleNameForClass(Class(strongModule)))")
# end
# def find_and_replace(dir, findstr, replacestr)
# Dir[dir].each do |name|
#     text = File.read(name)
#     replace = text.gsub(findstr,replacestr)
#     if text != replace
#         puts "Fix: " + name
#         File.open(name, "w") { |file| file.puts replace }
#         STDOUT.flush
#     end
# end
# Dir[dir + '*/'].each(&method(:find_and_replace))
# end
